name: "Setup Python"
description: "Setup python, install poetry, install dependencies, cache."

inputs:
  python_version:
    description: "The python version to use."
    required: true

  working_dir:
    description: "The location to run the poetry commands in"
    required: true
    default: "."

  use_cache:
    description: "Enable the usage of cache for this action"
    required: true
    default: "true"

  cache_pre-commit:
    description: "Enable caching of pre-commit dependencies"
    required: false
    default: "true"

  install_args:
    description: "Extra arguments passed to the install command"
    required: false
    default: ""

  poetry_version:
    description: "The poetry version to install (passed to pip install)"
    required: false
    default: "poetry"

  checkout:
    description: "Perform a checkout of the repository in the action. If this is false, this must be done manually before running the action."
    required: false
    default: "true"

  python_cmd:
    description: "The python command to be used. If not specified, it defaults to just 'python'. Incompatible with 'python_version'."
    required: false
    default: ""

  dev:
    description: "Install developer dependencies."
    required: false
    default: "true"
    deprecationMessage: "The dev argument of the `setup-python` action is deprecated, please use `install_args` with the appropriate options. This will be removed in the next major release."

outputs:
  cache-hit:
    description: "Was there a cache hit for the python cache."
    value: ${{ steps.python_cache.outputs.cache-hit }}
  python-version:
    description: "The full Python semver version used."
    value: ${{ steps.python_ver.outputs.python-version }}

runs:
  using: "composite"

  steps:
    # Checkout the code to get access to project files such as poetry and pre-commit configs
    - uses: actions/checkout@v4
      if: inputs.checkout == 'true'

    # Install python in our workflow
    - name: Setup python
      uses: actions/setup-python@v5
      if: inputs.python_cmd == ''
      id: python_setup
      with:
        python-version: ${{ inputs.python_version }}

    # Export the selected python version
    - name: Select Python Runtime
      id: python_ver
      shell: bash
      run: |
        echo "::group::Select Python Runtime"
        if [ "${{ inputs.python_cmd }}" = "" ]; then
          # We're using a normal setup-python install, just re-export the version
          echo "python-version=${{ steps.python_setup.outputs.python-version }}" >> "$GITHUB_OUTPUT"
          echo "python-cmd=python" >> "$GITHUB_OUTPUT"
        else
          # The user is bringing their own python version. Test it and export the version.
          py_cmd="${{ inputs.python_cmd }}"
          echo "Using python from: $py_cmd"
          if ! command -v "$py_cmd" &> /dev/null; then
            echo "Could not locate python command. Make sure it is available on path?"
            echo "Path: $PATH"
            echo "PWD: $PWD"
            echo "CMD: $py_cmd"
            exit 1
          fi
          echo "python-version=$($py_cmd -V | cut -d " " -f 2)" >> "$GITHUB_OUTPUT"
          echo "python-cmd=$py_cmd" >> "$GITHUB_OUTPUT"
        fi
        echo "::endgroup::"

    # Specify directories that require caching
    - name: Python Dependency Caching
      uses: actions/cache@v4
      id: python_cache
      with:
        path: |
          ~/.cache/pypoetry
          ~/.cache/pip
        key: "python-${{ runner.os }}-v1.6.0-\
        ${{ steps.python_ver.outputs.python-version }}-${{ inputs.dev }}-${{ inputs.working_dir }}-${{ inputs.poetry_version }}-${{ inputs.install_args }}-\
        ${{ hashFiles(format('{0}/pyproject.toml', inputs.working_dir), format('{0}/poetry.lock', inputs.working_dir)) }}"

    # Cache pre-commit independently of other cache
    - name: Pre-commit Environment Caching
      if: inputs.cache_pre-commit == 'true'
      uses: actions/cache@v4
      with:
        path: ~/.cache/pre-commit
        key: "precommit-${{ runner.os }}-v1.6.0-\
        ${{ steps.python_ver.outputs.python-version }}-${{ inputs.dev }}-${{ inputs.working_dir }}-${{ inputs.poetry_version }}-\
        ${{ hashFiles('./.pre-commit-config.yaml') }}"

    - name: Install Poetry
      shell: bash
      run: |
        echo "::group::Install Poetry"
        echo "Installing poetry under python version ${{ steps.python_ver.outputs.python-version }}"
        ${{ steps.python_ver.outputs.python-cmd }} -m pip install ${{ inputs.poetry_version }}
        echo "::endgroup::"

    - name: Install dependencies
      shell: bash
      run: |
        if [ "${{ steps.python_cache.outputs.cache-hit }}" = "true" ]; then
          if [ "${{ inputs.use_cache }}" = "false" ]; then
            echo "Caching not enbaled, deleting cache."
            rm -rf ~/.cache/pypoetry
            rm -rf ~/.cache/pip
            rm -rf ~/.cache/pre-commit
          else
            echo "Cache hit, skipping install."
            exit
          fi
        fi

        echo "::group::Install Dependencies"
        cd ${{ inputs.working_dir }}
        py_cmd="${{ steps.python_ver.outputs.python-cmd }}"

        if [[ "$($py_cmd -m poetry -V)" =~ .*"1.1.".* ]]; then
          if [ "${{ inputs.dev }}" = "true" ]; then
            $py_cmd -m poetry install ${{ inputs.install_args }}
          else
            $py_cmd -m poetry install ${{ inputs.install_args }} --no-dev
          fi
        else
          if [ "${{ inputs.dev }}" = "true" ]; then
            $py_cmd -m poetry install ${{ inputs.install_args }}
          else
            $py_cmd -m poetry install ${{ inputs.install_args }} --without dev
          fi
        fi
        echo "::endgroup::"

    - name: Configure Path
      shell: bash
      run: |
        echo "::group::Configure Path"
        cd ${{ inputs.working_dir }}
        py_cmd="${{ steps.python_ver.outputs.python-cmd }}"
        echo "$($py_cmd -m poetry env info --path)/bin" >> $GITHUB_PATH
        echo "Added $($py_cmd -m poetry env info --path)/bin to path"
        $py_cmd -m poetry -V
        echo "::endgroup::"
